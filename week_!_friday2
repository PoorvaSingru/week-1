#include <iostream>
#include <unordered_set>

struct Node {
  int data;
  Node* next;
};

void removeDuplicates(Node* &head) {
  std::unordered_set<int> seen;
  Node* current = head;
  Node* prev = nullptr;

  while (current) {
    if (seen.count(current->data) == 0) {
      seen.insert(current->data);
      prev = current;
      current = current->next;
    } else {
      prev->next = current->next;
      delete current;
      current = prev->next;
    }
  }
}

void push(Node** head_ref, int new_data) {
  Node* new_node = new Node;
  new_node->data = new_data;
  new_node->next = (*head_ref);
  (*head_ref) = new_node;
}

void printList(Node* head) {
  while (head != nullptr) {
    std::cout << head->data << " -> ";
    head = head->next;
  }
  std::cout << "nullptr" << std::endl;
}

int main() {
  Node* head = nullptr;

  push(&head, 10);
  push(&head, 5);
  push(&head, 3);
  push(&head, 2);
  push(&head, 1);
  push(&head, 2);
  push(&head, 3);

  std::cout << "Original Linked List: ";
  printList(head);

  removeDuplicates(head);

  std::cout << "Linked List after removing duplicates: ";
  printList(head);

  return 0;
}
